#!/bin/bash
set -e

# Force color output
export FORCE_COLOR=true
export PEST_NO_PROGRESS=0
export PEST_NO_COVERAGE=1

# ANSI color codes
GREEN='\033[0;32m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
RESET='\033[0m'

printf "${BLUE}===============================================${RESET}\n"
printf "${BLUE}Running pre-commit hooks for PHP code quality${RESET}\n"
printf "${BLUE}===============================================${RESET}\n"

# Get list of staged PHP files (excluding seeders)
# Seeders are excluded as they are not production code and don't require strict type checking
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep ".php$" | grep -v "database/seeders/" || echo "")

if [ -n "$STAGED_FILES" ]; then
  printf "${YELLOW}Checking PHP files (excluding seeders):${RESET} $STAGED_FILES\n"
  
  # Check if the Docker container is running
  if ! docker ps | grep -q learning-laravel-php; then
    printf "${RED}ERROR:${RESET} Docker container 'learning-laravel-php' is not running.\n"
    printf "Please start it with: ${CYAN}docker-compose -f .docker/docker-compose.yml up -d${RESET}\n"
    exit 1
  fi

  # Run Pint for code formatting
  printf "\n${CYAN}▶ Running PHP Pint for code formatting...${RESET}\n"
  if ! docker exec -t learning-laravel-php php ./vendor/bin/pint $STAGED_FILES; then
    printf "\n${RED}ERROR:${RESET} PHP Pint failed. Please fix the code style issues and try again.\n"
    exit 1
  fi
  
  # Run PHPStan for static analysis
  printf "\n${CYAN}▶ Running PHPStan for static analysis...${RESET}\n"
  if ! docker exec -t learning-laravel-php php ./vendor/bin/phpstan analyse $STAGED_FILES --memory-limit=2G --ansi; then
    printf "\n${RED}ERROR:${RESET} PHPStan found issues in your code. Please fix them and try again.\n"
    exit 1
  fi
  
  # Run Pest for tests
  printf "\n${CYAN}▶ Running Pest tests...${RESET}\n"
  if ! docker exec -t learning-laravel-php php -d  memory_limit=512M ./vendor/bin/pest --colors=always; then
    printf "\n${RED}ERROR:${RESET} Tests are failing. Please fix the failing tests and try again.\n"
    exit 1
  fi
  
  # Add back the formatted files to staging
  printf "\n${CYAN}▶ Adding formatted files back to git staging...${RESET}\n"
  git add $STAGED_FILES
  
  printf "\n${GREEN}✅ All checks passed successfully!${RESET}\n"
else
  printf "${YELLOW}No PHP files to check. Skipping pre-commit hooks.${RESET}\n"
fi

exit 0
